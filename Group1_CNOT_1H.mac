#########################################################
# 
# Group1_CNOT_1H
#
# A pulse sequence suitable for performing a
# pulse and collect experiment.
#
#   1H    90y - devolution - 90x -devolution -     - pulse - acq
#   13C -     - devolution - 90y -devolution - 90x - no dec
#
# Copyright (c) Magritek Ltd 2022
#
# U.I. V5
#########################################################

#########################################################
# 
# The is the entry point for the SpinsolveExpert 
# interface. It will add the experiment to the parameter
# list or with the control key pressed open the
# relevant macros in the pulse program compiler.
#
# Autogenerated 
#
#########################################################

procedure(Group1_CNOT_1H, parameters=null)

   macroLocation = getmacropath()
   parentPath = getbasepath(macroLocation)
   ppGroup = getbasedir(parentPath)

   if(iskeypressed("shift"))
      PulseProgramCompiler(guiwinnr(),null,parentPath,"Group1_CNOT_1H")
   elseif(iskeypressed("control"))
      gView->showExperimentHelp("Group1_CNOT_1H")
   else
      gExpt->addExperiment(ppGroup,"Group1_CNOT_1H",parameters)
   endif

endproc()

#########################################################
# 
# Provide a backdoor interface to this macro. This 
# adds [""] to the user interface list (guipar)
# and also generates the pulse program lists required 
# by execpp. Finally is calls execpp, returning any
# results in the structure 'r'.
#
# Autogenerated 
#
#########################################################

procedure(backdoor, guipar)

   seqInfo = :getseqpar()  
   r = gSeq->initAndRunPP(getmacropath(), getmacroname(), guipar, seqInfo)

endproc(r)

#########################################################
# 
# Returns important pulse sequence parameter lists
#
# rel ......... relationship between pulse sequence parameters
# var ......... variable which change during the pulse sequence
# pp_list ..... list of pulse sequence parameters sent to DSP
# pp_name ..... name of DSP pulse program to run
# phase_list .. phase cycling information
#
# Autogenerated 
#
#########################################################

procedure(getseqpar)

   rel = ["freq1H        = b1Freq1H",
          "freq13C       = b1Freq13C",
          "nPnts         = nrPnts",
          "waltzDuration = WALTZ16:duration(pulseLengthC180/2,pgo)",
          "nLoops        = trunc(1000*acqTime/waltzDuration)+1",
          "a90H          = 90Amplitude1H",
          "a90C          = 90Amplitude13C",
          "a90HC         = 90AmplitudeHC",
          "aDec          = decoupleAmp",
          "d90H          = pulseLength1H",
          "d90C          = pulseLength13C",
          "d180C         = pulseLengthC180",
          "d90C          = pulseLengthC180/2",
          "d270C         = 3*pulseLengthC180/2",
          "d360C         = 2*pulseLengthC180",
          "dAcq          = ucsUtilities:getacqDelay(pulseLength1H,shiftPoints,dwellTime)",
          "offFreq1H     = (centerFreqPPM-wvPPMOffset1H)*b1Freq1H",
          "O1            = offFreq1H",
          "fTx1H         = double(b1Freq1H)+double(offFreq1H/1e6d)",
          "fTx13C        = double(b1Freq13C)",
          "totPnts       = nrPnts",
          "totTime       = acqTime"]
   var = [""]
   pp_list = ["nPnts","fTx1H","fTx13C","a90HC","p4","d90C","dEvolution","freq1H","p5","a90C","freq13C","p1","dAcq"]
   pp_name = "Group1_CNOT_1H.p"
   phase_list = [0,2,0,2;0,0,2,2;2,2,0,0;1,3,1,3;0,2,0,2;0,2,0,2]

   seqInfo = struct(rel,var,pp_list,pp_name,phase_list)

endproc(seqInfo)


#######################################################
# Execute the pulse program, collecting nrScans of 
# data and displaying the result in the 1D plot. 
#
# This procedure can be modified to perform more
# complex functions using the passed parameters:
#
# guipar ..... all parameters from the user interface
# ppList ..... the pulse program parameter list
# pcList ..... phase-cycle list
# pcIndex .... indices of phase parameters in ppList
# varIndex ... indices of variable parameters in ppList
#
#######################################################

procedure(execpp,guipar,ppList,pcList,pcIndex,varIndex)

# Make all gui parameters available
   assignlist(guipar)

# Allocate space for output data
   sumData = cmatrix(totPnts)

# Calculate suitable time and frequency axes
   tAxis = ([0:1:totPnts-1]/totPnts)*totTime*1000 # ms
   fAxis = [-totPnts*zf/2:totPnts*zf/2-1]/(totTime*zf)*1000 # Hz

# Time domain filter
   if(filter == "yes")
      flt = filters:get_filter(filterType,"FTFid",tAxis/1e6)
   else
      flt = matrix(totPnts)+1
   endif

# Get plot regions
   (prt,prf) = ucsPlot:getPlotReferences()
   prt->showimag("true")
   prf->showimag("false")

# Work out frequency axis scale, label and range
   (fAxisDisp,fAxisLabel,fRange) = ucsPlot:generate1DFrequencyAxis(prf, fAxis, b1Freq1H, wvPPMOffset1H, offFreq1H, guipar)

# Accumulate scan
   for(scan = 0 to nrScans-1)

      wvScan = scan
      t1 = time()

    # Set phases for this scan
      (ppList,pAcq) = ucsRun:setPPPhase(ppList,scan,pcList,pcIndex)

    # Send phase parameters to DSP
       ucsRun:updatePPParameters(ppList,guipar,wvPort)  
 
    # Wait for the repetition time to complete
      check = ucsRun:checkTiming(guipar,scan,pcList)
      if(check == "abort")
         return(0)
      endif
 
    # Run the pulse program and collect the data
       ucsUtilities:suspendLock() # turn lock control loop off
      (status,data) = ucsRun:getData(totPnts,guipar)
       ucsUtilities:resumeLock()  # turn lock control loop on

    # See if stop button/escape key pressed
      if(status != "ok")
         return(0)
      endif

    # Shift the data to minimise p1
      data = shift(data,round(shiftPoints)) 

    # Correct the distortions in start of FID due to digital filter 
      data = ucsUtilities:correctFilter1(data,dwellTime)

    # Accumlate the data
      sumData = ucsRun:accumulate(accumulate,pAcq,sumData,data)

    # Correct the first data point
      datacorr = sumData
      if (shiftPoints == 1)
         datacorr = ucsUtilities:correctFirstPoint(sumData)
         datacorr[0] = datacorr[0]/2
      endif

    # Process data
      (phasedTimeData,spectrum,ph0) = ucsRun:transformData(zerofill(datacorr.*flt,zf*totPnts,"end"),fAxis,guipar,"fid")

    # Simple offset baseline correction
 #     spectrum = ucsRun:baselineCorrection(spectrum,"offset",32)

    # Plot the data 
      ucsPlot:graphTimeAndFreq(prt,prf,tAxis,sumData,fAxisDisp,spectrum,scan,guipar,
                               "Time data","Spectral data",
                               "Time (ms)","Amplitude (\G(m)V)",
                               fAxisLabel,"Amplitude")

      if(check == "finish")
         scan = scan+1
         exitfor()
      endif

   next(scan)

# Save the data
   ucsFiles:savePlot(prt,:getPlotInfo("pt1"),guipar,"noReport")
   ucsFiles:savePlot(prf,:getPlotInfo("pt2"),guipar,"simpleReport")
   ucsFiles:saveMNovaData(prt,"",guipar,"simpleReport")

# Save the processing parameters
   :saveProcPar(guipar,ph0,fRange)

# Pack the data for return
   result = struct()
   result->tx = tAxis
   result->ty = sumData/scan
   result->fx = fAxis
   result->fy = spectrum/scan
   result->par = struct(guipar)

# Return the results
   return(result)

endproc("execpp")

########################################################
# Get the name of a plot file given the region name
# or return the whole list
########################################################

procedure(getPlotInfo,plotRegion)

   info = ["pt1","fid.pt1","pt2","spectrum.pt1"]

   if(plotRegion == "all")
      return(info)
   endif

   idx = getlistindex(info,plotRegion)
   if(idx != -1)
      return(info[idx+1])
   endif

endproc(null)

########################################################
# Return expected experiment duration
########################################################

procedure(expectedDuration, guipar)

   assignstruct(guipar)
   totScans = nrScans + useStartDelay
   duration = (totScans*repTime)/1000

endproc(duration)


#################################
# Save the processing parameters
#################################

procedure(saveProcPar,guipar,p0,xrange)

   assignlist(guipar)
  
   if(saveData == "false")
      return
   endif

   if(usePPMScale == "yes")
      xrange = xrange*single(b1Freq1H)
   endif

   procpar = ["apodizationFunction = \"$filterType$\"",
              "baseLineCorrectionMethod = \"None\"",
              "displayInPPM = \"$usePPMScale$\"",
              "ftOrigin = \"Start\"",
              "ftType = \"Complex\"",
              "p0Phase = $p0$",
              "p1Phase = 0",
              "p1Pivot = 0",
              "p1FixedPhase = 0",
              "phaseMethod = \"p0, p1 fixed phase\"",
              "ppmOffset = $centerFreqPPM$",
              "zeroFill = $zf$",
              "plotWidth = $xrange[1]-xrange[0]$",
              "plotStart = $xrange[0]$",
              "shiftPoints = 1"]

   cd("$dataDirectory$\\$expName$")
   if(isfile("proc.par"))
      par = load("proc.par")
      procpar = mergelists(procpar,par)
   endif

   save("proc.par",procpar)

   if(isfile("proc_temp.par"))
      rmfile("proc_temp.par")
   endif

endproc()
